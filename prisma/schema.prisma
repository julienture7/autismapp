generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  chatSessions  ChatSession[]
  profiles      Profile[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            String         @id @default(cuid())
  userId        String
  name          String
  age           Int
  type          String
  interests     String?
  preferences   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  achievements  Achievement[]
  chatSessions  ChatSession[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  progressItems ProgressItem[]
}

model ChatSession {
  id         String        @id @default(cuid())
  userId     String
  profileId  String
  topicFocus String?
  startedAt  DateTime      @default(now())
  endedAt    DateTime?
  duration   Int?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  messages   ChatMessage[]
  profile    Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  content     String
  role        String
  audioBase64 String?
  createdAt   DateTime    @default(now())
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ProgressItem {
  id        String   @id @default(cuid())
  profileId String
  category  String
  skill     String
  level     Int      @default(1)
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  description String
  category    String
  icon        String?
  createdAt   DateTime @default(now())
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
